import aiohttp
from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from .db import add_watch, remove_watch, list_watches, get_last_price
from .moex import fetch_price_from_moex
import logging

logger = logging.getLogger(__name__)

class TickerStates(StatesGroup):
    waiting_for_ticker_add = State()
    waiting_for_ticker_remove = State()
    waiting_for_ticker_price = State()

def _main_keyboard() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å")],
        [KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫"), KeyboardButton(text="üíπ –¶–µ–Ω–∞")],
    ], resize_keyboard=True)
    return kb

def _make_symbol_inline_keyboard(symbol: str) -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–¶–µ–Ω–∞", callback_data=f"price:{symbol}"),
         InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å", callback_data=f"remove:{symbol}")]
    ])
    return kb

def register_handlers(dp: Dispatcher, bot: Bot):
    @dp.message(Command(commands=["start"]))
    async def cmd_start(message: Message):
        await message.answer(
            """–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ü–∏–π —Å –ú–æ—Å–∫–æ–≤—Å–∫–æ–π –±–∏—Ä–∂–∏.
""",
            reply_markup=_main_keyboard()
        )

    @dp.message(Command(commands=["help"]))
    async def cmd_help(message: Message):
        await cmd_start(message)

    @dp.message(TickerStates.waiting_for_ticker_add)
    async def process_add_ticker(message: Message, state: FSMContext):
        symbol = (message.text or "").upper().strip()
        if not symbol:
            await message.reply("–ü—É—Å—Ç–æ–π —Ç–∏–∫–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return

        await message.reply(f"–ü—Ä–æ–≤–µ—Ä—è—é —Ç–∏–∫–µ—Ä {symbol} –Ω–∞ MOEX...")
        async with aiohttp.ClientSession() as session:
            price = await fetch_price_from_moex(symbol, session)

        if price is None:
            await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–∏–∫–µ—Ä –Ω–∞ MOEX –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç–∏–∫–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π.")
            await state.clear()
            return

        await add_watch(message.chat.id, symbol, price)
        await message.reply(f"–î–æ–±–∞–≤–ª–µ–Ω–æ: <b>{symbol}</b>. –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {price}", reply_markup=_main_keyboard())
        await state.clear()

    @dp.message(TickerStates.waiting_for_ticker_remove)
    async def process_remove_ticker(message: Message, state: FSMContext):
        symbol = (message.text or "").upper().strip()
        if not symbol:
            await message.reply("–ü—É—Å—Ç–æ–π —Ç–∏–∫–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return

        removed = await remove_watch(message.chat.id, symbol)
        if removed:
            await message.reply(f"{symbol} —É–¥–∞–ª—ë–Ω –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö.", reply_markup=_main_keyboard())
        else:
            await message.reply(f"{symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ.", reply_markup=_main_keyboard())
        await state.clear()

    @dp.message(TickerStates.waiting_for_ticker_price)
    async def process_price_ticker(message: Message, state: FSMContext):
        symbol = (message.text or "").upper().strip()
        if not symbol:
            await message.reply("–ü—É—Å—Ç–æ–π —Ç–∏–∫–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return

        await message.reply("–ó–∞–ø—Ä–∞—à–∏–≤–∞—é —Ü–µ–Ω—É...")
        async with aiohttp.ClientSession() as session:
            price = await fetch_price_from_moex(symbol, session)

        if price is None:
            await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è " + symbol, reply_markup=_main_keyboard())
        else:
            await message.reply(f"{symbol}: {price}", reply_markup=_main_keyboard())
        await state.clear()

    @dp.callback_query()
    async def cb_query_all(cb: CallbackQuery, state: FSMContext):
        data = cb.data or ""
        if data.startswith("price:"):
            symbol = data.split(":", 1)[1]
            await cb.answer()
            async with aiohttp.ClientSession() as session:
                price = await fetch_price_from_moex(symbol, session)
            if price is None:
                await cb.message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è {symbol}")
            else:
                await cb.message.edit_text(f"{symbol} : {('%.4g' % price) if price is not None else '‚Äî'}", reply_markup=_make_symbol_inline_keyboard(symbol))
            return
        if data.startswith("remove:"):
            symbol = data.split(":", 1)[1]
            await cb.answer()
            removed = await remove_watch(cb.message.chat.id, symbol)
            if removed:
                await cb.message.answer(f"{symbol} —É–¥–∞–ª—ë–Ω –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö.")
            else:
                await cb.message.answer(f"{symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ.")
            return

    @dp.message()
    async def all_text_handler(message: Message, state: FSMContext):
        current_state = await state.get_state()
        if current_state is not None:
            return

        text = (message.text or "").strip()
        if text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å":
            await message.answer("–û—Ç–ø—Ä–∞–≤—å —Ç–∏–∫–µ—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä SBER –∏–ª–∏ GAZP):")
            await state.set_state(TickerStates.waiting_for_ticker_add)
            return
        if text == "‚ûñ –£–¥–∞–ª–∏—Ç—å":
            await message.answer("–û—Ç–ø—Ä–∞–≤—å —Ç–∏–∫–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä SBER):")
            await state.set_state(TickerStates.waiting_for_ticker_remove)
            return
        if text == "üìã –°–ø–∏—Å–æ–∫":
            items = await list_watches(message.chat.id)
            if not items:
                await message.answer("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ —Ç–∏–∫–µ—Ä —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É ‚ûï")
                return
            for sym, price in items:
                kb = _make_symbol_inline_keyboard(sym)
                await message.answer(f"{sym} : {('%.4g' % price) if price is not None else '‚Äî'}", reply_markup=kb)
            return
        if text == "üíπ –¶–µ–Ω–∞":
            await message.answer("–û—Ç–ø—Ä–∞–≤—å —Ç–∏–∫–µ—Ä, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É:")
            await state.set_state(TickerStates.waiting_for_ticker_price)
            return